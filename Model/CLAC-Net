import torch
import torch.nn as nn

from DEAB import DEAB
from CLRKS import CLRKS
from DoubleConv import DoubleConv


class CLAC_Net(nn.Module):
    def __init__(
            self, in_channels, out_channels,
    ):
        super(CLAC_Net, self).__init__()
        #Encoder
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.dcov1 = DoubleConv(in_channels, 64)
        self.dcov2 = DoubleConv(64, 128)
        self.dcov3 = DoubleConv(128, 256)
        self.dcov4 = DoubleConv(256, 512)

        self.DEAB = DEAB(512, 1024)
        self.CLRKS = CLRKS()

        #Decoder
        self.dcov5 = DoubleConv(1024, 512)
        self.up1 = nn.ConvTranspose2d(512, 256, kernel_size=2, stride=2)
        self.dcov6 = DoubleConv(512, 256)
        self.up2 = nn.ConvTranspose2d(256, 128, kernel_size=2, stride=2)
        self.dcov7 = DoubleConv(256, 128)
        self.up3 = nn.ConvTranspose2d(128, 64, kernel_size=2, stride=2)
        self.dcov8 = DoubleConv(128, 64)
        self.final_conv = nn.Conv2d(64, out_channels, kernel_size=1)

    def forward(self, x):
        x = self.dcov1(x)
        skip_up = x
        x = self.pool(x)
        x = self.dcov2(x)
        skip_mid = x
        x = self.pool(x)
        x = self.dcov3(x)
        skip_low = x
        x = self.pool(x)
        x = self.dcov4(x)

        skip_up, skip_mid, skip_low = self.CLRKS(skip_up, skip_mid, skip_low)
        x = self.DEAB(x)

        x = self.dcov5(x)
        x = self.up1(x)
        x = torch.cat((skip_up, x), dim=1)
        x = self.dcov6(x)
        x = self.up2(x)
        x = torch.cat((skip_mid, x), dim=1)
        x = self.dcov7(x)
        x = self.up3(x)
        x = torch.cat((skip_low, x), dim=1)
        x = self.dcov8(x)

        return self.final_conv(x)



